IsPure<- function(data) {
  length(unique(data[,ncol(data)])) == 1
}

#IsPure(train)

entrophy<-function(data){
  if(IsPure(data)) return(0)
  else {
    n<-length(data$class)
    class<-as.numeric(data$class)
    n1<-sum(class==2);n0<-sum(class==1)
    p<-c(n1/n,n0/n)
  return(-sum(p*log(p,2)))
  }
}  # entrophy(train)

IG<-function(data,A){    ## "age" , "sex" don't forget ""
  if(sum(colnames(data)==A)==0) paste(A, "is not attributes of this data")
  else {
    p<-which(colnames(data)==A) ## split data by pth attribute, check if pth is numeric or categorical
    if(length(unique(data[,p]))>10) {  ## numeric variable split into 2.
      med<-median(data[,p])
      data1<-data[data[,p]>med|data[,p]==med,];n1<-length(data1[,1])
      data2<-data[data[,p]<med,];n2<-length(data2[,1])
      n=n1+n2
      p<-c(n1/n,n2/n); H<-c(entrophy(data1),entrophy(data2));
      entrophyafter<-sum(p*H);entrophybefore<-entrophy(data)
      return(entrophybefore-entrophyafter)
    }  
    else{           # categorical vaiable
      m<-length(unique(data[,p]))   # m is the number of splits
      name<-unique(data[,p])
      n<-numeric(m);H<-numeric(m)
      for(i in 1:m){
        data1<-data[data[,p]==name[i],]
        n[i]<-length(data1[,1]);H[i]<-entrophy(data1)
      }
      p<-n/sum(n);entrophyafter<-sum(p*H);entrophybefore<-entrophy(data)
      return(entrophybefore-entrophyafter)
    }
    }  
}


#ID3 <- function(node, data) {
  node$obsCount <- nrow(data)
  #if the data-set is pure (e.g. all toxic), then
  if (IsPure(data)) {
    child <- node$AddChild(unique(data[, ncol(data)]))
    node$feature <- tail(names(data), 1)
    child$obsCount <- nrow(data)
    child$feature <- ''
  } else {
    #chose the feature with the highest information gain (e.g. 'thal")
    name <-
      colnames(data)[-ncol(data)]
    p <- length(name)
    #p is number of attributes
    ig <- numeric(p)
    for (i in 1:p) {
      ig[i] <- IG(data, name[i])
    }
    feature <-
      name[which(ig == max(ig))][1]  ## find the feature with largest ig,if tie,first 1
    node$feature <- feature
    #take the subset of the data-set having that feature value
    
    ## delete that feature, then split data, childobs is a list of3
    if (length(unique(data[, feature])) < 5) {
      # if feature is category
      childObs <-
        split(data[, !(names(data) %in% feature)], data[, feature], drop = TRUE)
      for (i in 1:length(childObs)) {
        ## childobs is a list,
        #construct a child having the name of that feature value (e.g. 'red')
        child <- node$AddChild(names(childObs)[i])
        #call the algorithm recursively on the child and the subset
        ID3(child, childObs[[i]])   ### [i] is still a list,[[i]] is dataframe.
      }
    } else{
      ## numeric feature
      med <- mean(data[, feature])
      childObs <-
        split(data[, !(names(data) %in% feature)], data[, feature] > med, drop = TRUE)
      #construct a child having the name of that feature value >50 <=50
      child1 <- node$AddChild(paste(feature, "<", med))
      ID3(child1, childObs[[1]])
      child2 <- node$AddChild(paste(feature, ">", med))
      ID3(child2, childObs[[2]])
    }
    
  }
}

##stop criteria
#stp <- function(data, m) {
  name <- colnames(data)[-ncol(data)]
  p <- length(name)
  if (p < 1) {
    ## (iV) no remaining split
    return(1)    ##1  satisfy condition of stopping
  } else {
    #p is number of attributes
    ig <- numeric(p)
    for (i in 1:p) {
      ig[i] <- IG(data, name[i])
    }
    if (max(ig) < 0) {
      return(1)    ##(iii) no positive IG
    } else{
      if (nrow(data) < m) {
        return(1)
      } else{
        if (IsPure(data) == 1) {
          return(1)
        } else{
          return(0)
        }
      }
    }
    
  }
  
}
stp<-function(data,m){
  p<-(ncol(data)-1);n<-ncol(data);name<-names(data[,-p])
  ig <- numeric(p)
  for (i in 1:p) {
    ig[i] <- IG(data, name[i])
  }
  if(IsPure(data)==0&(p>1|p==1)&max(ig)>0&n>m) return(0)
  else return(1)
}



## find most frequent class
mostfreq<-function(data){
  n<-nrow(data);p<-ncol(data)
  featurevalue<-unique(data[,p])
  l<-length(unique(data[,p]))
  freq<-numeric(l)
  for(i in 1:l){
    freq[i]<-sum(data[,p]==featurevalue[i])
  }
  return(featurevalue[(freq==max(freq))][1])  ##[1] when #+ == #-
}


#ID3 <- function(node, data, m) {
  node$obsCount <- nrow(data)
  #if the data-set is pure (e.g. all toxic), then
  if (IsPure(data) | nrow(data) < m) {
    child <-
      node$AddChild(unique(data[, ncol(data)])[1])    # factor not working mostfreq(data)
    node$feature <- tail(names(data), 1)
    child$obsCount <- nrow(data)
    child$feature <- ''
  } else {
    #chose the feature with the highest information gain (e.g. 'color')
    name <-
      colnames(data)[-ncol(data)]
    p <- length(name)
    #p is number of attributes
    ig <- numeric(p)
    for (i in 1:p) {
      ig[i] <- IG(data, name[i])
    }
    if (max(ig) > 0) {
      feature <-
        name[which(ig == max(ig))][1]  ## find the feature with largest ig,if tie,first 1
      node$feature <- feature
      #take the subset of the data-set having that feature value
      ## delete that feature, then split data, childobs is a list
      if (class(data[, feature]) != "numeric") {
        # if feature is category
        childObs <-
          split(data[,!(names(data) %in% feature)], data[, feature], drop = TRUE)
        for (i in 1:length(childObs)) {
          ## childobs is a list,
          #construct a child having the name of that feature value (e.g. 'red')
          child <-
            node$AddChild(paste(feature, "=", names(childObs)[i]))
          #call the algorithm recursively on the child and the subset
          ID3(child, childObs[[i]], m)   ### [i] is still a list,[[i]] is dataframe.
        }
      } else{
        ## numeric feature
        med <- median(data[, feature])
        childObs <-
          split(data[,!(names(data) %in% feature)], data[, feature] > med, drop = TRUE)
        #construct a child having the name of that feature value >50 <=50
        child1 <-
          node$AddChild(paste(feature, "<", med))
        ID3(child1, childObs[[1]], m)
        child2 <-
          node$AddChild(paste(feature, ">", med))
        ID3(child2, childObs[[2]], m)
      }
    } else {
      child <-
        node$AddChild(unique(data[, ncol(data)])[1])    # factor not working mostfreq(data)
      node$feature <- tail(names(data), 1)
      child$obsCount <- nrow(data)
      child$feature <- ''
    }
    
  }
}
 





